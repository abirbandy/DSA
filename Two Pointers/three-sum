#lc medium
'''
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.
'''
# o(n^2)

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        op = []
        for i in range(len(nums)):
            if i > 0 and nums[i] == nums[i-1]:
                continue
            l, r = i+1 , len(nums) - 1
            while(l<r):
                if nums[r] + nums[l] == -nums[i]:
                    op.append([nums[i],nums[l],nums[r]])
                    l += 1
                    while nums[l] == nums[l-1] and l<r :
                        l += 1
                elif  nums[r] + nums[l] > -nums[i]:
                    r -= 1
                elif nums[r] + nums[l] < -nums[i]:
                    l += 1
        return op